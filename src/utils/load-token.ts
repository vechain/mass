import { Net } from '../net'
import { Token, AssetType } from '../types'
import { promises as fs } from 'fs'
import * as path from 'path'

const ghIO = new Net("https://vechain.github.io")

const Supported = Object.keys(AssetType).filter(x => x !== parseFloat(x).toString())
const list: { [index: string]: Token } = {}

const makeFileContent = (list: object) => {
    return `/* this file is generated by scripts/load-token */
import { AssetType, Token } from '../types'

const tokens: { [index: string]: Token } = ${JSON.stringify(list)}

const AssetLiterals = Object.keys(AssetType).filter(x => x !== parseFloat(x).toString())
const AssetMap = new Map<string, string>()
for (let asset of AssetLiterals) {
    AssetMap.set(asset.toLowerCase(), asset)
}

export const normalizeAsset = (asset: string): string | null => {
    const key = asset.toLowerCase()
    if (AssetMap.has(key)) {
        return AssetMap.get(key)!
    }
    return null
}

export const getAssetDecimals = (symbol: keyof typeof AssetType): number => {
    if (symbol === 'VET' || symbol === 'VTHO') {
        return 18
    }

    return tokens[symbol].decimals
}
`
}

void (async () => {
    const pending = []

    const mainnet = await ghIO.http<Array<Omit<Token, 'genesis'>>>('GET', '/token-registry/main.json')
    for (const item of mainnet) {
        if (item.symbol === 'VTHO' || item.symbol === 'VET') {
            continue
        }

        if (Supported.indexOf(item.symbol) !== -1) {
            const token: Token = {
                name: item.name,
                symbol: item.symbol,
                address: item.address,
                decimals: item.decimals
            }
            list[token.symbol] = token
        } else {
            pending.push(item.symbol)
        }
    }

    const testnet = await ghIO.http<Array<Omit<Token, 'genesis'>>>('GET', '/token-registry/test.json')
    for (const item of testnet) {
        if (item.symbol === 'VTHO' || item.symbol === 'VET') {
            continue
        }

        if (Supported.indexOf(item.symbol) !== -1) {
            if (!list[item.symbol]) {
                const token: Token = {
                    name: item.name,
                    symbol: item.symbol,
                    address: item.address,
                    decimals: item.decimals
                }
                list[token.symbol] = token
            }
        } else if (pending.indexOf(item.symbol) === -1) {
            pending.push(item.symbol)
        }
    }

    const file = await fs.open(path.join(__dirname, "asset.ts"), 'w')
    await file.write(makeFileContent(list))
    await file.close()

    console.log('Pending: ' + pending.join(', '))
    process.exit(0)
})().catch((e) => {
    console.log(e)
    process.exit(-1)
})